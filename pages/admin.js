/** @format */

// imports
import { useState } from "react";
import Head from "next/head";

// gql
import { useMutation } from "@apollo/client";
import {
  CREATE_STORE,
  DELETE_STORE,
  GET_STORE,
  UPDATE_STORE,
} from "../GraphQL/Mutation";

export default function Admin() {
  // states
  const [finalData, setFinalData] = useState("");

  // states
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [desc, setDesc] = useState("");
  const [price, setPrice] = useState("");
  const [image, setImage] = useState();
  const [loading, setLoading] = useState(false);

  //get store item from backend
  const [getStore, { get_store_err }] = useMutation(GET_STORE, {
    //if data get successfully then add data into State(finalData)
    onCompleted: (data) => {
      console.log("get all data", data);
      setFinalData(data.getStore);
    },
    //if there is an error than this function call
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        console.log("Get store error", graphQLErrors);
      }
      if (networkError) console.log(`[Network error]: ${networkError}`);
    },
  });

  //create function for add items into database
  const [createStore, { create_err }] = useMutation(CREATE_STORE, {
    onCompleted: (data) => {
      console.log("data", data);
      setFinalData(data);
    },
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors[0].extensions.exception.code == 11000) {
        console.log("setFinalDataError", "Already existed book");
      }
      if (networkError) console.log(`[Network error]: ${networkError}`);
    },
  });

  //update sore item functions
  const [updateStore, { update_err }] = useMutation(UPDATE_STORE, {
    onCompleted: (data) => {
      console.log("data", data);
      setFinalData(data);
    },
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        console.log("UPate error", graphQLErrors);
      }
      if (networkError) console.log(`[Network error]: ${networkError}`);
    },
  });

  //delete store item functions
  const [deleteStore, { errr }] = useMutation(DELETE_STORE);

  // read
  const getStoreData = () => {
    getStore({
      variables: {},
    });
  };

  // create
  const addStore = async () => {
    setLoading(true);
    //upload image on Cloudinary
    const formData = new FormData();
    formData.append("file", image);
    //book-store is folder name on cloudinary
    formData.append("upload_preset", "book-store");
    //send image to cloudinary and get url
    const data = await fetch(
      "https://api.cloudinary.com/v1_1/innovageio/image/upload",
      {
        method: "POST",
        body: formData,
      }
    ).then((r) => r.json());
    createStore({
      variables: {
        type: "Book",
        title: title,
        description: desc,
        authorName: author,
        language: "English",
        price: price,
        quantity: "3",
        image: data.secure_url,
      },
    }).then(() => {
      setTitle("");
      setAuthor("");
      setDesc("");
      setPrice("");
      setImage("");
      setLoading(false);
    });
  };

  // update
  const updateIdStore = async () => {
    //upload image on Cloudinary
    const formData = new FormData();
    formData.append("file", image);
    //book-store is folder name on cloudinary
    formData.append("upload_preset", "book-store");
    //send image to cloudinary and get url
    const data = await fetch(
      "https://api.cloudinary.com/v1_1/innovageio/image/upload",
      {
        method: "POST",
        body: formData,
      }
    ).then((r) => r.json());
    updateStore({
      variables: {
        id: "62f2b38c6599863687667c06",
        type: "Book",
        title: "Create Name 5",
        description: "12312",
        authorName: "Rehman ali",
        language: "English",
        price: "90.0$",
        quantity: "3",
        image: data.secure_url,
      },
    });
  };

  // delete
  const removeStore = (id) => {
    deleteStore({
      variables: {
        id: id,
      },
    });
  };

  return (
    <div className='admin'>
      <Head>
        <title>Admin BookShop</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='admin-form'>
        <label>
          Title
          <input value={title} onChange={(e) => setTitle(e.target.value)} />
        </label>
        <label>
          Author
          <input value={author} onChange={(e) => setAuthor(e.target.value)} />
        </label>
        <label>
          Description
          <input value={desc} onChange={(e) => setDesc(e.target.value)} />
        </label>
        <label>
          Price
          <input
            value={price}
            type='number'
            onChange={(e) => setPrice(e.target.value)}
          />
        </label>
        <label className='admin-form-select-img'>
          Select Image
          <span>
            <input
              placeholder='select image'
              type='file'
              name='file'
              onChange={(e) => setImage(e.target.files[0])}
            />
          </span>
        </label>
      </div>
      <div className='admin-form-btns'>
        <button onClick={() => addStore()}>
          {loading ? "Loading" : "Add Book"}
        </button>
        <button onClick={() => getStoreData()}>Show List</button>
      </div>
      <div className='admin-list'>
        {finalData.length > 0 &&
          finalData.map((data) => (
            <div className='admin-list-item' key={data.id}>
              <img
                src={
                  data.image ??
                  "https://www.dermalina.com/wp-content/uploads/2020/12/no-image.jpg"
                }
                alt='book-img'
              />
              <div>
                <h4>{data.title}</h4>
                <h6>{data.authorName}</h6>
                <p>{data.description}</p>
                <h5>{data.price} USD</h5>
              </div>
              <button
                onClick={() => {
                  removeStore(data.id);
                  getStoreData();
                }}
              >
                Delete
              </button>
            </div>
          ))}

        {/* <button onClick={() => updateIdStore()}>UPDate Store</button>*/}
      </div>
    </div>
  );
}
