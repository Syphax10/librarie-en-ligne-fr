/** @format */

// imports
import React, { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import Image from "next/image";
import { useMutation } from "@apollo/client";

// styled
import { HomeWrap } from "../../styles/HomeStyles";
import {
  DetailContent,
  DetailWrap,
  EditImageIcon,
} from "../../styles/DetailStyles";

// components
import Navbar from "../../components/Navbar";

// mutation
import { GET_STORE, UPDATE_STORE } from "../../GraphQL/Mutation";

const Edit = () => {
  // states
  const [mainData, setMainData] = useState(null);
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [desc, setDesc] = useState("");
  const [price, setPrice] = useState("");
  const [image, setImage] = useState();
  const [imageToShow, setImageToShow] = useState();
  const [loading, setLoading] = useState(false);

  // router
  const router = useRouter();
  const { id } = router.query;

  // get products
  const [getStore, { get_store_err }] = useMutation(GET_STORE, {
    //if data get successfully then add data into State(data)
    onCompleted: (data) => {
      const res = data.getStore;
      const item = res.find((i) => i.id === id);
      setMainData(item);
      setTitle(item.title);
      setAuthor(item.authorName);
      setDesc(item.description);
      setPrice(item.price);
      setImage(item.image);
      setImageToShow(item.image);
    },
    //if there is an error than this function callitem
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        console.log("Get store error", graphQLErrors);
      }
      if (networkError) console.log(`[Network error]: ${networkError}`);
    },
  });

  // get product data
  useEffect(() => {
    getStore({
      variables: {},
    });
  }, [getStore]);

  // update store mutation
  const [updateStore, { update_err }] = useMutation(UPDATE_STORE, {
    onCompleted: (data) => {
      setLoading(false);
      router.back();
    },
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        console.log("UPate error", graphQLErrors);
      }
      if (networkError) console.log(`[Network error]: ${networkError}`);
    },
  });

  // handle edit
  const handleEdit = async () => {
    setLoading(true);
    //upload image on Cloudinary
    const formData = new FormData();
    formData.append("file", image);
    //book-store is folder name on cloudinary
    formData.append("upload_preset", "book-store");
    //send image to cloudinary and get url
    const data = await fetch(
      "https://api.cloudinary.com/v1_1/innovageio/image/upload",
      {
        method: "POST",
        body: formData,
      }
    ).then((r) => r.json());
    updateStore({
      variables: {
        id: mainData.id,
        type: "Book",
        title: title,
        description: desc,
        authorName: author,
        language: "English",
        price: price,
        quantity: "3",
        image: data.secure_url,
      },
    });
  };

  function onFileSelected(e) {
    // Assuming only image
    var file = e.target.files[0];
    var reader = new FileReader();
    var url = reader.readAsDataURL(file);

    reader.onloadend = function (e) {
      setImageToShow(reader.result);
    }.bind(this);
  }

  return (
    <HomeWrap>
      <Head>
        <title>BookShop</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Navbar back />
      {mainData ? (
        <DetailWrap>
          <div style={{ position: "relative" }}>
            <Image
              width='100%'
              height='80px'
              objectFit='contain'
              src={
                imageToShow ??
                "https://www.dermalina.com/wp-content/uploads/2020/12/no-image.jpg"
              }
              alt='product-img'
              layout='responsive'
            />
            <EditImageIcon>
              <input
                placeholder='select image'
                type='file'
                name='file'
                onChange={(e) => {
                  console.log(onFileSelected(e));
                  setImage(e.target.files[0]);
                }}
              />
              <span>Change Image</span>
              <img src='/images/edit.png' alt='edit' />
            </EditImageIcon>
          </div>
          <DetailContent>
            <label>
              Title
              <input value={title} onChange={(e) => setTitle(e.target.value)} />
            </label>
            <label>
              Author
              <input
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
              />
            </label>
            <label>
              Description
              <textarea
                value={desc}
                onChange={(e) => setDesc(e.target.value)}
              />
            </label>
            <label>
              Price
              <input
                value={price}
                type='number'
                onChange={(e) => setPrice(e.target.value)}
              />
            </label>
            <div>
              <button onClick={() => router.back()}>Cancel</button>
              <button className='save-btn' onClick={handleEdit}>
                {loading ? "Loading" : "Save Changes"}
              </button>
            </div>
          </DetailContent>
        </DetailWrap>
      ) : (
        <h1>Loading</h1>
      )}
    </HomeWrap>
  );
};

export default Edit;
